
pod strings {
  data : string ;
  next : strings ;
}

add (a: int, b: int) : int {
  c : int 0 ;
  return if (__sup(a, c), __add(a, b), __add(c, a)) ;
}


max (as: numbers) : int {
  return reduce (as, lambda (a: int, mx: int): int {
    return if (__sup(a, mx), a, mx) ;
  }) ;
}

sum (as: numbers): int {
  return reduce (as, lambda (a: int, acc: int): int {
    return __add (a, ac);
  }) ;
}

positive (as: numbers): int {
  return filter (as, lambda (a: int): bool {
    return sup (a, 0) ;
  }) ;
}

positive_v2 (as: numbers): int {
  return filter (as, lambda __sup(_, 0)) ;
}

abs (as: numbers): numbers {
  return map (as, lambda if(sup(_, 0), _, minus(_))) ;
}

pod numbers {
  i : int ;
  next : [@] numbers ;
}

pairs : numbers {0, {2, {4, {6, {8}}}}} ; // maniÃ¨re native d'initialiser un objet ;
pairs2 : numbers [0, 2, 4, 6, 8] ; // maniÃ¨re shortcut d'initialiser un iterable ;
pairs3 : numbers push (pairs2, __add(back(pairs2), 2)) ;
pairs4 : numbers pop (pairs3, at(pairs3, 2)) ; 

pairs5 : numbers reverse (pairs3) ;


  obj: int ;
  __next: [@] numbers ;
}

next (a: numbers): @numbers {
  return a.__next ;
}

prev (a: numbers): @numbers {
  return a.__prev ;
}
